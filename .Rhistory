coord_flip() +
theme(panel.background = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks  = element_blank(),
axis.line   = element_line(colour=NA),
axis.line.x = element_line(colour="grey80"),
legend.position="none") +
labs(x="", y="frequency") +
scale_fill_gradient(low="#FF8888",high="#FF0000")
print(mybar)
library(twitteR); library(tm); library(xlsx); library(wordcloud); library(ggplot2); library(RColorBrewer)
pallette = brewer.pal.info
View(pallette)
str(x)
myCorpus <- VCorpus(DirSource("mycorpus", encoding = "UTF-8"))
## build term-document matrix ##
myCorpus <- tm_map(myCorpus, PlainTextDocument)
myTdm <- TermDocumentMatrix(myCorpus, control=list(wordLengths=c(3,Inf)))
m <- as.matrix(myTdm)
wordFreq <- sort(rowSums(m), decreasing=TRUE)
word_frame = data.frame(word=names(wordFreq), freq=as.numeric(wordFreq))
word_frame$word <- factor(word_frame$word, levels = word_frame$word)
str(word_frame)
str(word_frame[1:20,])
x=word_frame[1:20,]
mybar <- ggplot(x, aes(x= name, y=freq, fill=freq)) +
geom_bar(stat = "identity")  +
coord_flip() +
theme(panel.background = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks  = element_blank(),
axis.line   = element_line(colour=NA),
axis.line.x = element_line(colour="grey80"),
legend.position="none") +
labs(x="", y="frequency") +
scale_fill_gradient(low="#FF8888",high="#FF0000")
print(mybar)
x$word = factor(x$word, levels = x$word)
str(x)
View(x)
mybar <- ggplot(x, aes(x= word, y=freq, fill=freq)) +
geom_bar(stat = "identity")  +
coord_flip() +
theme(panel.background = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks  = element_blank(),
axis.line   = element_line(colour=NA),
axis.line.x = element_line(colour="grey80"),
legend.position="none") +
labs(x="", y="frequency") +
scale_fill_gradient(low="#FF8888",high="#FF0000")
print(mybar)
pallette = data.frame( low= c("#FF8888","#b3b3ff","#ffd633"), high= c("#FF0000","#0000ff","#997a00"))
mybar <- ggplot(x, aes(x= word, y=freq, fill=freq)) +
geom_bar(stat = "identity")  +
coord_flip() +
theme(panel.background = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks  = element_blank(),
axis.line   = element_line(colour=NA),
axis.line.x = element_line(colour="grey80"),
legend.position="none") +
labs(x="", y="frequency") +
scale_fill_gradient(low=pallette$low[2],pallette$high[2])
print(mybar)
library(graphics)
rgb2hsv(c(0,0,204))
z =rgb2hsv(c(0,0,204))
z1 =rgb2hsv("#0000ff")
mybar <- ggplot(x, aes(x= word, y=freq, fill=freq)) +
geom_bar(stat = "identity")  +
coord_flip() +
theme(panel.background = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks  = element_blank(),
axis.line   = element_line(colour=NA),
axis.line.x = element_line(colour="grey80"),
legend.position="none") +
labs(x="", y="frequency") +
scale_fill_gradient(low = hsv(0.6666667,(min(x$freq)/max(x$freq),0.8)),
high = hsv(0.6666667,1,0.8))
print(mybar)
mybar <- ggplot(x, aes(x= word, y=freq, fill=freq)) +
geom_bar(stat = "identity")  +
coord_flip() +
theme(panel.background = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks  = element_blank(),
axis.line   = element_line(colour=NA),
axis.line.x = element_line(colour="grey80"),
legend.position="none") +
labs(x="", y="frequency") +
scale_fill_gradient(low = hsv(0,(min(x$freq)/max(x$freq),0.5)),
high = hsv(0,1,0.5))
print(mybar)
mybar <- ggplot(x, aes(x= name, y=freq, fill=freq)) +
geom_bar(stat = "identity")  +
coord_flip() +
theme(panel.background = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks  = element_blank(),
axis.line   = element_line(colour=NA),
axis.line.x = element_line(colour="grey80"),
legend.position="none") +
labs(x="", y="frequency") +
scale_fill_gradient(low="#FF8888",high="#FF0000")
print(mybar)
rm(z)
mybar <- ggplot(x, aes(x= name, y=freq, fill=freq)) +
geom_bar(stat = "identity")  +
coord_flip() +
theme(panel.background = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks  = element_blank(),
axis.line   = element_line(colour=NA),
axis.line.x = element_line(colour="grey80"),
legend.position="none") +
labs(x="", y="frequency") +
scale_fill_gradient(low="#FF8888",high="#FF0000")
print(mybar)
mybar <- ggplot(x, aes(x= word, y=freq, fill=freq)) +
geom_bar(stat = "identity")  +
coord_flip() +
theme(panel.background = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks  = element_blank(),
axis.line   = element_line(colour=NA),
axis.line.x = element_line(colour="grey80"),
legend.position="none") +
labs(x="", y="frequency") +
scale_fill_gradient(low="#FF8888",high="#FF0000")
print(mybar)
pallette = data.frame(low=c("#ff6666", "#6666ff", "#80ff80"), high= c("#FF0000","#0000ff","#00ff00"))
mybar <- ggplot(x, aes(x= word, y=freq, fill=freq)) +
geom_bar(stat = "identity")  +
coord_flip() +
theme(panel.background = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks  = element_blank(),
axis.line   = element_line(colour=NA),
axis.line.x = element_line(colour="grey80"),
legend.position="none") +
labs(x="", y="frequency") +
scale_fill_gradient(low=pallette$low[3],pallette$high[3])
print(mybar)
pallette$low[3]
pallette = data.frame(low = as.character(c("#ff6666", "#6666ff", "#80ff80")),
high = as.character(c("#FF0000","#0000ff","#00ff00")))
mybar <- ggplot(x, aes(x= word, y=freq, fill=freq)) +
geom_bar(stat = "identity")  +
coord_flip() +
theme(panel.background = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks  = element_blank(),
axis.line   = element_line(colour=NA),
axis.line.x = element_line(colour="grey80"),
legend.position="none") +
labs(x="", y="frequency") +
scale_fill_gradient(low=pallette$low[3],pallette$high[3])
print(mybar)
mybar <- ggplot(x, aes(x= word, y=freq, fill=freq)) +
geom_bar(stat = "identity")  +
coord_flip() +
theme(panel.background = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks  = element_blank(),
axis.line   = element_line(colour=NA),
axis.line.x = element_line(colour="grey80"),
legend.position="none") +
labs(x="", y="frequency") +
scale_fill_gradient(low="#80ff80","#00ff00")
print(mybar)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
dTable(airquality, sPaginationType = "full_numbers")
library(rCharts)
install.packages(rCharts)
install.packages("rCharts")
runApp("app-quiz-1")
runApp()
library(shiny)
runApp()
runApp()
install.packages("UsingR")
runApp()
install.packages(c("car", "caret", "curl", "dplyr", "evaluate", "foreach", "forecast", "formatR", "git2r", "highr", "Hmisc", "iterators", "jsonlite", "lme4", "lubridate", "mice", "pbkrtest", "quantreg", "randomForest", "rattle", "Rcpp", "RcppArmadillo", "RcppEigen", "rmarkdown", "roxygen2", "rstudioapi", "scales", "stringi", "testthat", "timeSeries"))
install.packages("shinyapps")
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='dtiana', token='A9B32DE91065A944752F3B424A7A9898', secret='Vj6Yoe25NCX51T3RCZtA9bAHIS2sEiZ6Uahvi1YZ')
install.packages("viridis") # dependency
devtools::install_github("ropensci/plotly")
plotly:::verify("username")
Sys.setenv("plotly_username"="dtiana")
Sys.setenv("plotly_api_key"="m958shvp4s")
runGitHub( "titanicShinyApp", "diogoaurelio")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
pippo = sort(termFrequency[1:input$n_token],decreasing=F)
library(twitteR); library(tm); library(xlsx); library(wordcloud)
myCorpus <- VCorpus(DirSource("mycorpus", encoding = "UTF-8"))
myCorpus <- tm_map(myCorpus, PlainTextDocument)
m <- as.matrix(myTdm)
myTdm <- TermDocumentMatrix(myCorpus, control=list(wordLengths=c(3,Inf)))
m <- as.matrix(myTdm)
termFrequency <- rowSums(m)
termFrequency <- sort(termFrequency, decreasing = T)
wordFreq <- sort(rowSums(m), decreasing=TRUE)
pal_ette = row.names(brewer.pal.info)
sorted_tF = sort(termFrequency[1:input$n_token],decreasing=F)
sorted_tF = sort(termFrequency[1:10],decreasing=F)
barplot(sorted_tF, horiz=T, col="yellow")
barplot(sorted_tF, horiz=T, col="white")
midpointsx <- as.numeric(sorted_tF)/2
midpointsy <- barplot(sorted_tF, horiz = T)
text(x=midpointsx, y=midpointsy, labels = names(sorted_tF), col = brewer.pal(n = input$n_token, pal_ette[input$color]))
text(x=midpointsx, y=midpointsy, labels = names(sorted_tF), col = brewer.pal(n = input$n_token, pal_ette[1]))
text(x=midpointsx, y=midpointsy, labels = names(sorted_tF), col = brewer.pal(n = 10, pal_ette[1]))
midpointsy <- barplot(sorted_tF, horiz = T, col="white")
text(x=midpointsx, y=midpointsy, labels = names(sorted_tF), col = brewer.pal(n = 10, pal_ette[1]))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(twitteR); library(tm); library(xlsx); library(wordcloud)
myCorpus <- VCorpus(DirSource("mycorpus", encoding = "UTF-8"))
## build term-document matrix ##
myCorpus <- tm_map(myCorpus, PlainTextDocument)
myTdm <- TermDocumentMatrix(myCorpus, control=list(wordLengths=c(3,Inf)))
m <- as.matrix(myTdm)
termFrequency <- rowSums(m)
termFrequency <- sort(termFrequency, decreasing = T)
wordFreq <- sort(rowSums(m), decreasing=TRUE)
col_ors =(0,60,120,180,240)
input_color = 1
## barchart most frequent terms ##
sorted_tF = sort(termFrequency[1:10],decreasing=F)
sorted_tF
pal_ette = hsv(h = col_ors[input_color], s = sorted_tF/max(sorted_tF) , v=1)
col_ors =(0,60,120,180,240)
col_ors = c(0,60,120,180,240)
input_color = 1
## barchart most frequent terms ##
sorted_tF = sort(termFrequency[1:10],decreasing=F)
pal_ette = hsv(h = col_ors[input_color], s = sorted_tF/max(sorted_tF) , v=1)
barplot(sorted_tF, horiz=T, col="white")
midpointsx <- as.numeric(sorted_tF)/2
midpointsy <- barplot(sorted_tF, horiz = T, plot=F)
text(x=midpointsx, y=midpointsy, labels = names(sorted_tF), col = pal_ette))
text(x=midpointsx, y=midpointsy, labels = names(sorted_tF), col = pal_ette)
pal_ette = hsv(h = col_ors[input_color], s = 0.9+(sorted_tF/(10*max(sorted_tF)) , v=1)
barplot(sorted_tF, horiz=T, col="white")
midpointsx <- as.numeric(sorted_tF)/2
midpointsy <- barplot(sorted_tF, horiz = T, plot=F)
text(x=midpointsx, y=midpointsy, labels = names(sorted_tF), col = pal_ette)
barplot(sorted_tF, horiz=T, col="white")
barplot(sorted_tF, horiz=T, col="white", axisnames = F)
text(x=midpointsx, y=midpointsy, labels = names(sorted_tF), col = pal_ette)
pal_ette = hsv(h = col_ors[input_color], s = 0.9+0.1*(sorted_tF/max(sorted_tF) , v=1)
pal_ette = hsv(h = col_ors[input_color], s = (0.9+0.1*(sorted_tF/max(sorted_tF))) , v = 1)
barplot(sorted_tF, horiz=T, col="white", axisnames = F)
midpointsx <- as.numeric(sorted_tF)/2
midpointsy <- barplot(sorted_tF, horiz = T, plot=F)
text(x=midpointsx, y=midpointsy, labels = names(sorted_tF), col = pal_ette)
pal_ette = hsv(h = col_ors[input_color], s=1 , v=1, alpha = sorted_tF/max(sorted_tF )
barplot(sorted_tF, horiz=T, col="white", axisnames = F)
text(x=midpointsx, y=midpointsy, labels = names(sorted_tF), col = pal_ette)
pal_ette = hsv(h = col_ors[input_color], s=1 , v=1, alpha = sorted_tF/max(sorted_tF) )
barplot(sorted_tF, horiz=T, col="white", axisnames = F)
text(x=midpointsx, y=midpointsy, labels = names(sorted_tF), col = pal_ette)
pal_ette = hsv(h = col_ors[input_color], s=1 , v=1, alpha = 0.9+0.1*sorted_tF/max(sorted_tF) )
pal_ette = hsv(h = col_ors[input_color], s=1 , v=1, alpha = 0.9+0.1*sorted_tF/max(sorted_tF) )
barplot(sorted_tF, horiz=T, col="white", axisnames = F)
text(x=midpointsx, y=midpointsy, labels = names(sorted_tF), col = pal_ette)
pal_ette = hsv(h = col_ors[input_color], s=1 , v=1, alpha = 0.8+0.2*sorted_tF/max(sorted_tF) )
barplot(sorted_tF, horiz=T, col="white", axisnames = F)
text(x=midpointsx, y=midpointsy, labels = names(sorted_tF), col = pal_ette)
shiny::runApp()
input_color = 2
library(twitteR); library(tm); library(xlsx); library(wordcloud)
myCorpus <- VCorpus(DirSource("mycorpus", encoding = "UTF-8"))
## build term-document matrix ##
myCorpus <- tm_map(myCorpus, PlainTextDocument)
myTdm <- TermDocumentMatrix(myCorpus, control=list(wordLengths=c(3,Inf)))
m <- as.matrix(myTdm)
termFrequency <- rowSums(m)
termFrequency <- sort(termFrequency, decreasing = T)
wordFreq <- sort(rowSums(m), decreasing=TRUE)
col_ors = c(0,60,120,180,240)
input_color = 2
## barchart most frequent terms ##
sorted_tF = sort(termFrequency[1:10],decreasing=F)
pal_ette = hsv(h = col_ors[input_color], s=1 , v=1, alpha = 0.7+0.3*sorted_tF/max(sorted_tF) )
barplot(sorted_tF, horiz=T, col="white", axisnames = F)
hsv(60,1,1)
input_color = 1
## barchart most frequent terms ##
sorted_tF = sort(termFrequency[1:10],decreasing=F)
pal_ette = hsv(h = col_ors[input_color], s=100 , v=100, alpha = 0.7+0.3*sorted_tF/max(sorted_tF) )
col_ors[input_color]
rgb2hsv(255,0,0)
rgb2hsv(255,255,0)
col_ors = c( "red", "yellow", "limegreen", "cyan", "blue", "magenta")
hsv("red")
pippo = col2hsv(c("blue","green","red"))
install.packages("IDPmisc")
library(IDPmisc)
pippo = col2hsv(c("blue","green","red"))
pippo
str(pippo)
class(pippo)
View(pippo)
library(twitteR); library(tm); library(xlsx); library(wordcloud); library(IDPmisc)
myCorpus <- VCorpus(DirSource("mycorpus", encoding = "UTF-8"))
## build term-document matrix ##
myCorpus <- tm_map(myCorpus, PlainTextDocument)
myTdm <- TermDocumentMatrix(myCorpus, control=list(wordLengths=c(3,Inf)))
m <- as.matrix(myTdm)
termFrequency <- rowSums(m)
termFrequency <- sort(termFrequency, decreasing = T)
wordFreq <- sort(rowSums(m), decreasing=TRUE)
col_ors = c( "red", "yellow", "limegreen", "cyan", "blue", "magenta")
input_color = 1
## barchart most frequent terms ##
sorted_tF = sort(termFrequency[1:10],decreasing=F)
color_hsv = col2hsv(col_ors[input_color])
col2hsv()
color_hsv
class(color_hsv)
color_hsv$h
color_hsv[1]
color_hsv[2]
color_hsv[3]
pal_ette = hsv(h = color_hsv[1], s= color_hsv[2],  , v= color_hsv[1], alpha = 0.7+0.3*sorted_tF/max(sorted_tF) )
pal_ette = hsv(h=color_hsv[1], s=color_hsv[2], v=color_hsv[3], alpha = 0.7+0.3*sorted_tF/max(sorted_tF) )
barplot(sorted_tF, horiz=T, col="white", axisnames = F)
midpointsx <- as.numeric(sorted_tF)/2
midpointsy <- barplot(sorted_tF, horiz = T, plot=F)
text(x=midpointsx, y=midpointsy, labels = names(sorted_tF), col = pal_ette)
pal_ette = hsv(h=color_hsv[1], s=color_hsv[2], v=color_hsv[3], alpha = 0.5+0.5*sorted_tF/max(sorted_tF) )
barplot(sorted_tF, horiz=T, col="white", axisnames = F)
text(x=midpointsx, y=midpointsy, labels = names(sorted_tF), col = pal_ette)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(twitteR); library(tm); library(xlsx); library(wordcloud)
myCorpus <- VCorpus(DirSource("mycorpus", encoding = "UTF-8"))
## build term-document matrix ##
myCorpus <- tm_map(myCorpus, PlainTextDocument)
myTdm <- TermDocumentMatrix(myCorpus, control=list(wordLengths=c(3,Inf)))
m <- as.matrix(myTdm)
termFrequency <- rowSums(m)
termFrequency <- sort(termFrequency, decreasing = T)
wordFreq <- sort(rowSums(m), decreasing=TRUE)
wordFreq
termFreq()
termFrequency
str(wordFreq)
str(termFrequency)
class(wordFreq)
class(termFrequency)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(twitteR); library(tm); library(xlsx); library(wordcloud)
myCorpus <- VCorpus(DirSource("mycorpus", encoding = "UTF-8"))
## build term-document matrix ##
myCorpus <- tm_map(myCorpus, PlainTextDocument)
myTdm <- TermDocumentMatrix(myCorpus, control=list(wordLengths=c(3,Inf)))
m <- as.matrix(myTdm)
wordFreq <- sort(rowSums(m), decreasing=TRUE)
col_ors = c( "red", "yellow", "limegreen", "cyan", "blue", "magenta")
input_color = 1
## barchart most frequent terms ##
sorted_tF = sort(wordFreq[1:10],decreasing=F)
pal_ette = hsv(h = col_ors[input$color], s=1 , v=1, alpha = 0.7+0.3*sorted_tF/max(sorted_tF) )
pal_ette = hsv(h = col_ors[input_color], s=1 , v=1, alpha = 0.7+0.3*sorted_tF/max(sorted_tF) )
?color_hsv
library("IDPmisc", lib.loc="~/R/win-library/3.2")
?color_hsv
??color_hsv
library(twitteR); library(tm); library(xlsx); library(wordcloud); library(IDPmisc)
pal_ette = hsv(h = col_ors[input_color], s=1 , v=1, alpha = 0.7+0.3*sorted_tF/max(sorted_tF) )
color_hsv = col2hsv(col_ors[input$color])
color_hsv = col2hsv(col_ors[input_color])
pal_ette = hsv(h=color_hsv[1], s=color_hsv[2], v=color_hsv[3], alpha = 0.5+0.5*sorted_tF/max(sorted_tF))
barplot(sorted_tF, horiz=T, col="white", axisnames = F)
midpointsx <- as.numeric(sorted_tF)/2
midpointsy <- barplot(sorted_tF, horiz = T, plot=F)
text(x=midpointsx, y=midpointsy, labels = names(sorted_tF), col = pal_ette,)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shinyapps)
library(devtools)
shinyapps::setAccountInfo(name='dtiana', token='A9B32DE91065A944752F3B424A7A9898', secret='Vj6Yoe25NCX51T3RCZtA9bAHIS2sEiZ6Uahvi1YZ')
shiny::runApp()
install.packages("tidyr")
shiny::runApp()
library(rsconnect)
?deployApp
shinyapps::setAccountInfo(name='dtiana', token='A9B32DE91065A944752F3B424A7A9898', secret='Vj6Yoe25NCX51T3RCZtA9bAHIS2sEiZ6Uahvi1YZ')
deployApp(appName = "TextMiningExample")
library(devtools)
install_github("slidify", "ramnathv")
install_github("slidify", "ramnathv/slidify")
install_github("slidify", "ramnathv/slidify/slidify")
install_github("ramnathv/slidify")
install_github("ramnathv/slidifyLibraries")
library(slidify)
setwd("~/slidify_project")
setwd("~\slidify_project")
setwd("~/slidify/project")
setwd("slidify_project")
getwd()
author("myslides")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
library(twitteR); library(tm); library(xlsx); library(wordcloud); library(IDPmisc)
myCorpus <- VCorpus(DirSource("mycorpus", encoding = "UTF-8"))
myCorpus <- tm_map(myCorpus, PlainTextDocument)
myTdm <- TermDocumentMatrix(myCorpus, control=list(wordLengths=c(3,Inf)))
m <- as.matrix(myTdm)
wordFreq <- sort(rowSums(m), decreasing=T)
col_ors = c( "red", "yellow", "limegreen", "cyan", "blue", "magenta")
getwd()
library(twitteR); library(tm); library(xlsx); library(wordcloud); library(IDPmisc)
setwd("C:/Users/DADE/Documents/R_wd/slidify_project")
myCorpus <- VCorpus(DirSource("mycorpus", encoding = "UTF-8"))
myCorpus <- tm_map(myCorpus, PlainTextDocument)
myTdm <- TermDocumentMatrix(myCorpus, control=list(wordLengths=c(3,Inf)))
m <- as.matrix(myTdm)
wordFreq <- sort(rowSums(m), decreasing=T)
col_ors = c( "red", "yellow", "limegreen", "cyan", "blue", "magenta")
slidify("index.Rmd")
library(twitteR); library(tm); library(xlsx); library(wordcloud); library(IDPmisc)
old_wd = getwd()
setwd("C:/Users/DADE/Documents/R_wd/slidify_project")
myCorpus <- VCorpus(DirSource("mycorpus", encoding = "UTF-8"))
setwd(old_wd)
myCorpus <- tm_map(myCorpus, PlainTextDocument)
myTdm <- TermDocumentMatrix(myCorpus, control=list(wordLengths=c(3,Inf)))
m <- as.matrix(myTdm)
wordFreq <- sort(rowSums(m), decreasing=T)
col_ors = c( "red", "yellow", "limegreen", "cyan", "blue", "magenta")
slidify("index.Rmd")
getwd()
setwd("C:/Users/DADE/Documents/R_wd/slidify_project/myslides")
slidify("index.Rmd")
slidify("index.Rmd")
getwd()
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
sorted_tF = sort(wordFreq[1:10], decreasing=F )
color_hsv = col2hsv("magenta")
pal_ette = hsv(h=color_hsv[1], s=color_hsv[2], v=color_hsv[3], alpha = 0.5+0.5*sorted_tF/max(sorted_tF))
barplot( sorted_tF, horiz=T, col="white", axisnames=F )
midpointsx <- as.numeric(sorted_tF)/2
midpointsy <- barplot( sorted_tF, horiz = T, plot=F )
text(x=midpointsx, y=midpointsy, labels = names(sorted_tF), col = pal_ette)
slidify("index.Rmd")
sorted_tF = sort(wordFreq[1:10], decreasing=F )
color_hsv = col2hsv("magenta")
pal_ette = hsv(h=color_hsv[1], s=color_hsv[2], v=color_hsv[3], alpha = 0.5+0.5*sorted_tF/max(sorted_tF))
par(pin=c(8.3, 6.25))
barplot( sorted_tF, horiz=T, col="white", axisnames=F )
midpointsx <- as.numeric(sorted_tF)/2
midpointsy <- barplot( sorted_tF, horiz = T, plot=F )
text(x=midpointsx, y=midpointsy, labels = names(sorted_tF), col = pal_ette)
par(pin=c(8.3, 6.25))
barplot( sorted_tF, horiz=T, col="white", axisnames=F )
barplot( sorted_tF, horiz=T, col="white", axisnames=F )
